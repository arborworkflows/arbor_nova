---
- hosts: all
  vars:
    ansible_python_interpreter: '/usr/bin/python3'
    girder_virtualenv: '{{ ansible_env.HOME }}/.venv'
    arbor_nova_directory: '{{ ansible_env.HOME }}/arbor_nova'

  pre_tasks:
    - name: Update system package list
      apt:
        update_cache: true
      become: true
      become_user: root

    - name: Install python prereqs
      apt:
        name:
          - python-setuptools
          - python3-venv
          - python3-dev
          - python3-pip
      become: true
      become_user: root

    # install any dependencies needed for the R packages (devtools, aRbor, etc.)
    - name: Install R package prereqs
      apt:
        name:
          - libcurl4-openssl-dev
      become: true
      become_user: root

    - name: Create virtualenv
      command: |
        /usr/bin/python3.6 -m venv "{{ girder_virtualenv }}"
      args:
        creates: "{{ girder_virtualenv }}"

  tasks:

    # we needed to update the version of R to handle aRbor and treeplyr (dependency mvtnorm is R>= 3.5 only)
    #    - name: Install R
    #      apt:
    #        name: r-base
    #      become: true
    #      become_user: root

    #
    # remove the default R packages and install R 3.5 instead

    #- name: remove default R version
    #  command: apt purge r-base* r-recommended r-cran-*
    #  become: yes

    #- name: autoremove R
    #  command: apt autoremove
    #  become: yes

    #- name: apt update to remove R
    #  command: apt update
    #  become: yes

    #- name: add R3.5 repository in apt-get catalog
    #  command: add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'
    #  become: yes

    #- name: add R3.5 repository in apt-get catalog
    #  command: apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
    #  become: yes

    #- name: apt update to add R
    #  command: apt update
    #  become: yes

    - name: Install R packages from CRAN
      command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "if (! ('{{ item }}' %in% installed.packages()[,'Package'])) install.packages(pkgs='{{ item }}', repos=c('http://cran.cnr.Berkeley.edu'))"
      become: yes
      with_items:
        - ape
        - nlme
        - devtools
      environment:
        DISPLAY: :7

    - name: install R  packages from github
      command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "options(repos='http://cran.cnr.Berkeley.edu');library(devtools);install_github('{{item}}')"
      become: yes
      with_items:
        - hafen/cardoonTools
        - tangelo-hub/romanescoTools
        - arborworkflows/aRbor
        - uyedaj/treeplyr
      environment:
        DISPLAY: :7


    - name: Copy girder config file
      copy:
        src: config/girder.cfg
        dest: /etc/girder.cfg
      become: true
      become_user: root

    - name: Include mongodb role
      include_role:
        name: ansible-role-girder-mongodb

    - name: Install rabbitmq
      apt:
        name: rabbitmq-server
      become: true
      become_user: root

    - name: Include girder role
      include_role:
        name: ansible-role-girder
      vars:
        girder_version: "3.0.0a7.dev65"

    - name: Install girder plugins
      pip:
        name:
          - girder-jobs
        virtualenv: "{{ girder_virtualenv }}"

    - name: Clone arbor_nova
      git:
        repo: https://github.com/arborworkflows/arbor_nova.git
        version: "master"
        dest: "{{ arbor_nova_directory }}"

    - name: Install yarn
      npm:
        name: yarn
        global: true
      become: true
      become_user: root

    - name: Install client requirements
      yarn:
        path: "{{ arbor_nova_directory }}/client"

    - name: Build the static assets
      command: yarn build
      args:
        chdir: "{{ arbor_nova_directory }}/client"
        creates: "{{ arbor_nova_directory }}/dist"

    - name: Create static directory
      file:
        path: "{{ girder_virtualenv }}/share/girder/static/arbornova"
        state: directory

    - name: Copy static assets to the correct directory
      shell: cp -rf * "{{ girder_virtualenv }}/share/girder/static/arbornova/"
      args:
        chdir: "{{ arbor_nova_directory }}/client/dist"

    - name: Include girder_worker role
      include_role:
        name: ansible-role-girder-worker
      vars:
        girder_worker_install_source: "git"
        girder_worker_git_version: "41b634e0e7cafdabe1388d9aa05f6d8ebcaa12a3"
        girder_worker_virtualenv: "{{ girder_virtualenv }}"

  post_tasks:

    - name: Restart mongodb
      systemd:
        name: mongod
        state: restarted
      become: true
      become_user: root

    - name: Start Girder service
      systemd:
        name: girder
        state: started
      become: true
      become_user: root

    - name: Wait for girder to be up
      wait_for:
        port: 8080
        host: 0.0.0.0

    - name: install girder-client pip package
      pip:
        name: girder-client
      become: true
      become_user: root

    - name: Create 'admin' user
      girder:
        user:
          firstName: "Admin"
          lastName: "User"
          login: "admin"
          password: "letmein"
          email: "admin.admin@test.com"
          admin: true
        state: present

    - name: Create filesystem assetstore
      girder:
        username: "admin"
        password: "letmein"
        assetstore:
          name: "Filesystem Assetstore"
          type: "filesystem"
          root: "{{ ansible_env.HOME }}/assetstore/"
          current: true
        state: present

    - name: Set Worker API Url
      girder:
        port: 8080
        username: "admin"
        password: "letmein"
        setting:
          key: "worker.api_url"
          value: "http://localhost:8080/api/v1"

    - name: Install arbor_nova girder plugin
      pip:
        name:
          - "file://{{ arbor_nova_directory }}/girder_plugin"
          - "file://{{ arbor_nova_directory }}/girder_worker_tasks"
        editable: true
        virtualenv: "{{ girder_virtualenv }}"

    - name: Install arbor_nova girder_worker tasks
      pip:
        name:
          - "file://{{ arbor_nova_directory }}/girder_worker_tasks"
        editable: true
        virtualenv: "{{ girder_virtualenv }}"

    - name: Restart girder service
      systemd:
        name: girder
        state: restarted
      become: true
      become_user: root

    - name: Restart girder_worker service
      systemd:
        name: girder_worker
        state: restarted
      become: true
      become_user: root
